#include<bits/stdc++.h>
using namespace std;

vector<int>graph[5001];

int visited[10001];
int visited2[10001];
int numOfChild[10001];

int numOfnode;
int res=0;
int  dfs(int src)
{

    if (visited[src] == 1) return 0;
    visited[src]=1;

    if (src!=1&&graph[src].size()==1)
    {
        return 1;
    }

    for(int i=0; i<graph[src].size(); i++)
    {
        numOfChild[src] += dfs(graph[src][i]);

    }
    numOfChild[src]++;

    // cout<<" "<<src<<" "<<  numOfChild[src] <<endl;



    return numOfChild[src];


}

void dfs2(int src)
{

    if (visited2[src] == 1) return ;
    visited2[src]=1;


    for(int i=0; i<graph[src].size(); i++)
    {

        int newNode = numOfChild[graph[src][i]];
     //   cout<<"new "<<graph[src][i]<<" "<<newNode<<endl;
        if (newNode == 0 || numOfnode-newNode == 0)
        {
            continue;
        }
        if ((newNode%2==0)&& ((numOfnode-newNode)%2)==0 && visited2[graph[src][i]] == 0)
        {
           // cout<<"res "<<graph[src][i]<<endl;
            res++;
        }

        dfs2(graph[src][i]);

    }


}
int main()
{
    int edge,i,j,u,v;
    scanf("%d%d",&numOfnode,&edge);

    for(i = 0; i<edge; i++)
    {
        scanf("%d%d",&u,&v);
        graph[u].push_back(v);
        graph[v].push_back(u);
    }

    dfs(1);
    for(i=1; i<=numOfnode; i++)
    {
        cout<<numOfChild[i]<<endl;
    }

   // dfs2(1);
  //  cout<<res<<endl;

}
/*
10 9
2 1
3 1
4 3
5 2
6 1
7 2
8 6
9 8
10 8
*/
