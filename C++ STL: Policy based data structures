#include <bits/stdc++.h>
#include <ext/pb_ds/assoc_container.hpp>

using namespace __gnu_pbds;
using namespace std;

typedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> indexed_set;
set<long long >st,st2,st3;
int main()
{
    indexed_set s,s2;
    long long  q, type, k,x,n1,n2;
    char ch;
    scanf("%lld",&q);
    while (q --)
    {
        scanf(" %c",&ch);
        scanf("%lld",&x);
        if(ch=='I')
        {
            s.insert(x);
        }
        else if(ch=='C')
        {
            int xxx = s.order_of_key(x); // How many  number are less than x.
            printf("%d\n",xxx);
        }
        else if(ch=='K')
        {
            n1=s.size();
            if(x>n1)
                printf("invalid\n");
            else
            {
                auto x2 = s.find_by_order (x-1); // x2 is the element of xth index.
                printf("%d\n",*x2);
                //cout << *x2 << endl;
            }
        }
        /*
        else if (type == 0)
        {
            auto x = s.find_by_order (s.size() - k);
            cout << *x << endl;
        }
        else
            */
        else
        {
            s.erase (s.find (x)); // if there exit x in s then delete x.
        }

    }
    return 0;
}

